question,answerRegex,expectedDisplay
"Display only the first field of each line in 'users.txt' (fields separated by ':') using cut (-d ':' -f 1).","^cut\s+-d\s+:\s+-f\s+1\s+users\.txt$","cut -d : -f 1 users.txt"
"Extract columns 2 and 3 from 'data.csv' separated by commas (-d ',' -f 2,3).","^cut\s+-d\s+,\s+-f\s+2,3\s+data\.csv$","cut -d , -f 2,3 data.csv"
"Replace all occurrences of 'foo' with 'bar' in 'notes.txt' and print to stdout (sed 's/foo/bar/g').","^sed\s+'s/foo/bar/g'\s+notes\.txt$","sed 's/foo/bar/g' notes.txt"
"Delete blank lines from 'log.txt' (sed '/^$/d').","^sed\s+'/^$/d'\s+log\.txt$","sed '/^$/d' log.txt"
"Print only lines 10â€“20 from 'report.txt' (sed -n '10,20p').","^sed\s+-n\s+'10,20p'\s+report\.txt$","sed -n '10,20p' report.txt"
"Print the second column of 'scores.txt' (awk '{print $2}').","^awk\s+'\\{print\s+\\$2\\}'\s+scores\.txt$","awk '{print $2}' scores.txt"
"Print lines where the third field > 50 in 'scores.txt' (awk '$3>50').","^awk\s+'\\$3>50'\s+scores\.txt$","awk '$3>50' scores.txt"
"Sum the numbers in column 2 of 'data.txt' (awk '{sum+=\$2} END {print sum}').","^awk\s+'\\{sum\\+=\\$2\\}\\s+END\\s+\\{print\\s+sum\\}'\s+data\.txt$","awk '{sum+=$2} END {print sum}' data.txt"
"Translate lowercase to uppercase from stdin (tr 'a-z' 'A-Z').","^tr\s+'a-z'\s+'A-Z'$","tr 'a-z' 'A-Z'"
"Remove all digits from input text (tr -d '0-9').","^tr\s+-d\s+'0-9'$","tr -d '0-9'"
"Combine 'file1.txt' and 'file2.txt' line-by-line (paste).","^paste\s+file1\.txt\s+file2\.txt$","paste file1.txt file2.txt"
"Join sorted files 'a.txt' and 'b.txt' on first field (join).","^join\s+a\.txt\s+b\.txt$","join a.txt b.txt"
"Display lines common to 'a.txt' and 'b.txt' (comm -12).","^comm\s+-12\s+a\.txt\s+b\.txt$","comm -12 a.txt b.txt"
"Find differences between two files (diff -u).","^diff\s+-u\s+file1\.txt\s+file2\.txt$","diff -u file1.txt file2.txt"
"Count frequency of unique lines in 'words.txt' (sort | uniq -c | sort -nr).","^sort\s+words\.txt\s*\|\s*uniq\s+-c\s*\|\s*sort\s+-nr$","sort words.txt | uniq -c | sort -nr"
"Replace tabs with spaces in 'code.txt' (expand -t 4).","^expand\s+-t\s+4\s+code\.txt$","expand -t 4 code.txt"
"Compress repeating spaces in 'data.txt' (tr -s ' ').","^tr\s+-s\s+' '\s*<\s*data\.txt$","tr -s ' ' < data.txt"
"Read from stdin and write both to file and stdout (tee output.log).","^tee\s+output\.log$","tee output.log"
"Read from stdin, append output to 'all.log' instead of overwriting (-a).","^tee\s+-a\s+all\.log$","tee -a all.log"
"Find all '.txt' files and execute wc -l on each (-type f -name '*.txt' -exec wc -l {} ;).","^find\s+\.\s+-type\s+f\s+-name\s+['\"]\*\.txt['\"]\s+-exec\s+wc\s+-l\s+\{\}\s+\\;$","find . -type f -name '*.txt' -exec wc -l {} \\;"
"Find all '.log' files and delete them (-type f -name '*.log' -delete).","^find\s+\.\s+-type\s+f\s+-name\s+['\"]\*\.log['\"]\s+-delete$","find . -type f -name '*.log' -delete"
"Search recursively for 'ERROR' in .py files (-r --include='*.py').","^grep\s+-r\s+--include=['\"]\*\.py['\"]\s+ERROR\s+\.$","grep -r --include='*.py' ERROR ."
"Search case-insensitive for 'fail' excluding 'tmp' directory (-ri --exclude-dir=tmp).","^grep\s+-ri\s+--exclude-dir=tmp\s+fail\s+\.$","grep -ri --exclude-dir=tmp fail ."
"Replace 'foo' with 'bar' in all .txt files (sed -i 's/foo/bar/g').","^sed\s+-i\s+'s/foo/bar/g'\s+\*.txt$","sed -i 's/foo/bar/g' *.txt"
"Extract all IP addresses from 'access.log' using grep -E regex.","^grep\s+-E\s+'([0-9]{1,3}\\.){3}[0-9]{1,3}'\s+access\.log$","grep -E '([0-9]{1,3}\\.){3}[0-9]{1,3}' access.log"
"Replace multiple spaces with single space using awk.","^awk\s+'\\{gsub\(/\[ \]+/,\\" \\"\);print\\}'\s+file\.txt$","awk '{gsub(/[ ]+/,\" \");print}' file.txt"
"List environment variables containing 'PATH' (printenv | grep PATH).","^printenv\s*\|\s*grep\s+PATH$","printenv | grep PATH"
"Export a variable MYNAME='William'.","^export\s+MYNAME=William$","export MYNAME=William"
"Display value of variable MYNAME (echo).","^echo\s+\$MYNAME$","echo $MYNAME"
"Create a simple for-loop printing numbers 1 to 5.","^for\s+i\s+in\s+\$(seq\s+1\s+5);\s+do\s+echo\s+\$i;\s+done$","for i in $(seq 1 5); do echo $i; done"
"Use while-loop to print numbers 1 to 3.","^i=1;\s+while\s+\[\\s+\$i\s+-le\s+3\\s+\];\s+do\s+echo\s+\$i;\s+i=\$\(expr\s+\$i\s+\+1\);\s+done$","i=1; while [ $i -le 3 ]; do echo $i; i=$(expr $i + 1); done"
"Conditional: print 'Yes' if file exists (if [ -f file ]; then echo Yes; fi).","^if\s+\[\\s+-f\\s+file\\s+\];\s+then\s+echo\s+Yes;\s+fi$","if [ -f file ]; then echo Yes; fi"
"Conditional: check if directory 'backup' exists (if [ -d backup ]; then echo Found; fi).","^if\s+\[\\s+-d\\s+backup\\s+\];\s+then\s+echo\s+Found;\s+fi$","if [ -d backup ]; then echo Found; fi"
"Run a command and redirect both stdout and stderr to 'output.log' (>&1 2>&1).","^command\s+>\s+output\.log\s+2>&1$","command > output.log 2>&1"
"Append both stdout and stderr to 'output.log' (>> 2>&1).","^command\s+>>\s+output\.log\s+2>&1$","command >> output.log 2>&1"
"Run a command in background and disown it.","^command\s+&\s+disown$","command & disown"
"Chain two commands: list files, then print 'Done'.","^ls\s+-lah\s*;\s*echo\s+Done$","ls -lah; echo Done"
"Execute multiple commands only if previous succeeds (&&).","^mkdir\s+backup\s+&&\s+cp\s+-r\s+data/\s+backup/$","mkdir backup && cp -r data/ backup/"
"Execute fallback command if first fails (||).","^grep\s+pattern\s+file\.txt\s+\|\|\s+echo\s+'Not\s+found'$","grep pattern file.txt || echo 'Not found'"
