question,answerRegex,expectedDisplay
"Define a class called `Person`.","^\s*class\s+Person\s*:\s*$","class Person:"
"Define a class `Dog` that inherits from `Animal`.","^\s*class\s+Dog\s*\(\s*Animal\s*\)\s*:\s*$","class Dog(Animal):"
"Create an `__init__` constructor that takes `self` and `name`.","^\s*def\s+__init__\s*\(\s*self\s*,\s*name\s*\)\s*:\s*$","def __init__(self, name):"
"Inside a class, set `self.name` to the argument `name`.","^\s*self\.name\s*=\s*name\s*$","self.name = name"
"Create a method `greet` in a class that prints \"Hi\".","^\s*def\s+greet\s*\(\s*self\s*\)\s*:\s*print\(\s*[\"']Hi[\"']\s*\)\s*$","def greet(self): print(\"Hi\")"
"Instantiate a `Person` object with name `\"Alice\"`.","^\s*p1\s*=\s*Person\s*\(\s*[\"']Alice[\"']\s*\)\s*$","p1 = Person(\"Alice\")"
"Access the `name` attribute of an object `p1`.","^\s*p1\.name\s*$","p1.name"
"Create a class variable `count` initialized to 0.","^\s*count\s*=\s*0\s*$","count = 0"
"Create a static method `hello` in a class.","^\s*@staticmethod\s*\n\s*def\s+hello\s*\(\s*\)\s*:\s*$","@staticmethod\ndef hello():"
"Create a class method `from_string` taking `cls` and `data`.","^\s*@classmethod\s*\n\s*def\s+from_string\s*\(\s*cls\s*,\s*data\s*\)\s*:\s*$","@classmethod\ndef from_string(cls, data):"
"Define a property getter for `age`.","^\s*@property\s*\n\s*def\s+age\s*\(\s*self\s*\)\s*:\s*$","@property\ndef age(self):"
"Define a property setter for `age`.","^\s*@age\.setter\s*\n\s*def\s+age\s*\(\s*self,\s*value\s*\)\s*:\s*$","@age.setter\ndef age(self, value):"
"Create a `__str__` method returning `self.name`.","^\s*def\s+__str__\s*\(\s*self\s*\)\s*:\s*return\s*self\.name\s*$","def __str__(self): return self.name"
"Call the `greet` method on object `p1`.","^\s*p1\.greet\(\s*\)\s*$","p1.greet()"
"Create a decorator called `log`.","^\s*def\s+log\s*\(\s*func\s*\)\s*:\s*$","def log(func):"
"Apply the `@log` decorator to a function `do_task`.","^\s*@log\s*\n\s*def\s+do_task\s*\(\s*\)\s*:\s*$","@log\ndef do_task():"
"Use `__name__ == \"__main__\"` to define entry point.","^\s*if\s+__name__\s*==\s*[\"']__main__[\"']\s*:\s*$","if __name__ == \"__main__\":"
"Import a class `Car` from module `vehicles`.","^\s*from\s+vehicles\s+import\s+Car\s*$","from vehicles import Car"
"Handle exceptions using try/except.","^\s*try\s*:\s*.*\n\s*except\s+\w+\s*:\s*.*$","try:\n    ...\nexcept Exception: ..."
"Raise a ValueError with message `\"Invalid\"`.","^\s*raise\s+ValueError\s*\(\s*[\"']Invalid[\"']\s*\)\s*$","raise ValueError(\"Invalid\")"
"Use list unpacking to assign `a, b = (1, 2)`.","^\s*a\s*,\s*b\s*=\s*\(\s*1\s*,\s*2\s*\)\s*$","a, b = (1, 2)"
"Create a generator that yields numbers 0–4.","^\s*def\s+\w+\s*\(\s*\)\s*:\s*for\s+\w+\s+in\s+range\(5\)\s*:\s*yield\s+\w+\s*$","def gen(): for i in range(5): yield i"
"Use `with` statement to open a file for reading.","^\s*with\s+open\(\s*[\"']\w+[\"']\s*,\s*[\"']r[\"']\s*\)\s+as\s+\w+\s*:\s*$","with open(\"file.txt\", \"r\") as f:"
"Use `*args` and `**kwargs` in a function definition.","^\s*def\s+\w+\s*\(\s*\*args\s*,\s*\*\*kwargs\s*\)\s*:\s*$","def func(*args, **kwargs):"
"Use a dictionary comprehension to map x→x² for range(5).","^\s*\{\s*\w+\s*:\s*\w+\*\*2\s+for\s+\w+\s+in\s+range\(5\)\s*\}\s*$","{x: x**2 for x in range(5)}"
"Import only `sqrt` from `math`.","^\s*from\s+math\s+import\s+sqrt\s*$","from math import sqrt"
"Use `__repr__` to return formatted string `\"Person(name=Alice)\"`.","^\s*def\s+__repr__\s*\(\s*self\s*\)\s*:\s*return\s*[\"']Person\(name=\{self\.name\}\)[\"']\s*$","def __repr__(self): return f\"Person(name={self.name})\""

